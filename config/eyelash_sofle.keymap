#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    behaviors {
    };

    macros {
        m1: m1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp J &kp E &kp F &kp F &kp R &kp E &kp Y &kp L &kp T &kp H &kp I &kp E &kp S &kp S &kp E &kp N &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "M1";
        };

        m2: m2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E &kp R &kp A &kp B &kp I &kp D &kp W &kp E &kp A &kp S &kp E &kp L &kp S &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "M2";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC           &kp N1        &kp N2        &kp N3     &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7  &kp N8     &kp N9         &kp N0        &kp BACKSPACE
&kp TAB           &kp Q         &kp W         &kp E      &kp R   &kp T        &kp DOWN_ARROW   &kp Y      &kp U   &kp I      &kp O          &kp P         &kp ENTER
&kp LEFT_CONTROL  &kp A         &kp S         &kp D      &kp F   &kp G        &kp LEFT_ARROW   &kp H      &kp J   &kp K      &kp L          &kp SEMI      &kp APOS
&kp LSHFT         &kp Z         &kp X         &kp C      &kp V   &kp B        &kp RIGHT_ARROW  &kp N      &kp M   &kp COMMA  &kp DOT        &kp FSLH      &kp RIGHT_SHIFT
&kp F19           &kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &mo 1   &kp SPACE    &kp ENTER        &kp SPACE  &mo 2   &kp RCTRL  &kp RIGHT_ALT  &kp LG(RWIN)
            >;

            sensor-bindings = <&inc_dec_kp F21 F22>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE      &kp F1         &kp F2    &kp F3     &kp F4  &kp F5    &mmv MOVE_UP     &kp F6            &kp F7             &kp F8          &kp F9           &kp F10         &kp DEL
&kp LS(GRAVE)  &kp LC(SLASH)  &kp UP    &trans     &trans  &trans    &mmv MOVE_DOWN   &kp PG_UP         &kp HOME           &kp UP          &kp END          &kp MINUS       &kp EQUAL
&trans         &kp LEFT       &kp DOWN  &kp RIGHT  &trans  &trans    &mmv MOVE_LEFT   &kp PG_DN         &kp LEFT           &kp DOWN        &kp RIGHT        &kp UNDERSCORE  &kp PLUS
&trans         &trans         &trans    &trans     &trans  &trans    &mmv MOVE_RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp BACKSLASH   &kp PIPE
&kp F20        &trans         &trans    &trans     &trans  &trans    &mkp LCLK        &trans            &trans             &trans          &trans           &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp F23 F24>;
        };

        layer_2 {
            bindings = <
&trans  &kp F11    &kp F12    &trans     &trans     &trans    &mmv MOVE_UP     &kp C_PLAY_PAUSE  &kp C_PREV  &kp C_NEXT    &trans        &trans         &kp DEL
&trans  &trans     &trans     &trans     &kp LC(R)  &trans    &mmv MOVE_DOWN   &trans            &trans      &trans        &trans        &kp MINUS      &kp EQUAL
&trans  &kp LC(A)  &trans     &trans     &kp LC(F)  &trans    &mmv MOVE_LEFT   &trans            &trans      &trans        &trans        &kp LS(UNDER)  &kp LS(PLUS)
&trans  &kp LC(A)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans    &mmv MOVE_RIGHT  &kp LBKT          &kp RBKT    &kp LS(LBRC)  &kp LS(RBRC)  &kp BSLH       &kp LS(PIPE)
&trans  &trans     &trans     &trans     &trans     &trans    &mkp LCLK        &trans            &trans      &trans        &trans        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&to 4         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp CAPSLOCK  &trans  &trans  &trans  &trans  &m2       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &m1     &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&to 0   &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans  &studio_unlock   &trans           &trans      &trans     &trans       &trans
&trans  &bt BT_CLR      &bt BT_CLR_ALL   &trans           &trans           &trans             &trans  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &trans      &trans     &trans       &trans
&trans  &out OUT_USB    &out OUT_BLE     &trans           &trans           &trans             &trans  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &trans      &trans     &trans       &trans
&trans  &rgb_ug RGB_ON  &rgb_ug RGB_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &sys_reset  &soft_off  &bootloader  &trans
&trans  &trans          &trans           &trans           &trans           &trans             &trans  &trans           &trans           &trans      &trans     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        goto3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
